From 5d5632a31d9185118c2d48c4c4a02babb0e2f2a1 Mon Sep 17 00:00:00 2001
From: Bins94 <kaipeng94@gmail.com>
Date: Thu, 2 Apr 2020 23:03:44 -0400
Subject: [PATCH 4/5] Support retState ebpfsig resource

---
 executor/executor.cc   |  7 ++++---
 pkg/rpctype/rpctype.go |  1 +
 prog/clone.go          |  5 +++--
 prog/prog.go           |  1 +
 prog/rand.go           |  2 +-
 syz-fuzzer/proc.go     | 16 ++++++++++++++++
 syz-manager/html.go    |  4 ++++
 7 files changed, 30 insertions(+), 6 deletions(-)

diff --git a/executor/executor.cc b/executor/executor.cc
index 69fa44ca..964b3ec4 100644
--- a/executor/executor.cc
+++ b/executor/executor.cc
@@ -36,6 +36,7 @@
 #endif
 
 #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))
+/* refer to the ebpf text */
 #define RETSTATE_SIG_MASK 0xf000000000000000
 #define STATE_SIG_MASK 0xe000000000000000
 #define COVERAGE_SIG_MASK 0xd0000000ffffffff
@@ -924,9 +925,9 @@ void write_coverage_signal(cover_t* cov, uint32* signal_count_pos, uint32* cover
 			uint64_t state = 0;
 			if (ret > 0) {
 				state = strtoul(buf, NULL, 16);
-				/* state signal start with 0xf
-	       * Write out real state for fuzzer's further handle
-	       */
+				/* state/retstate signal start with 0xe/0xf
+				 * Write out real state for fuzzer's further handle
+				 */
 				write_output64(state);
 				debug("A state signal 0x%016lx\n", state);
 				n = 0;
diff --git a/pkg/rpctype/rpctype.go b/pkg/rpctype/rpctype.go
index fcc01a99..ac99e73c 100644
--- a/pkg/rpctype/rpctype.go
+++ b/pkg/rpctype/rpctype.go
@@ -16,6 +16,7 @@ type RPCInput struct {
 	Prog   []byte
 	Signal signal.Serial
 	Cover  []uint32
+	SpeRes bool
 }
 
 type RPCCandidate struct {
diff --git a/prog/clone.go b/prog/clone.go
index c95ae206..6f5cdd64 100644
--- a/prog/clone.go
+++ b/prog/clone.go
@@ -9,8 +9,9 @@ import (
 
 func (p *Prog) Clone() *Prog {
 	p1 := &Prog{
-		Target: p.Target,
-		Calls:  make([]*Call, len(p.Calls)),
+		Target:   p.Target,
+		Calls:    make([]*Call, len(p.Calls)),
+		Resource: p.Resource,
 	}
 	newargs := make(map[*ResultArg]*ResultArg)
 	for ci, c := range p.Calls {
diff --git a/prog/prog.go b/prog/prog.go
index 1600c0a2..1ff27046 100644
--- a/prog/prog.go
+++ b/prog/prog.go
@@ -11,6 +11,7 @@ type Prog struct {
 	Target   *Target
 	Calls    []*Call
 	Comments []string
+	Resource bool
 }
 
 type Call struct {
diff --git a/prog/rand.go b/prog/rand.go
index 8583fbdc..2b8fcc2a 100644
--- a/prog/rand.go
+++ b/prog/rand.go
@@ -856,7 +856,7 @@ func (r *randGen) resourceCentric(s *state, t *ResourceType) (arg Arg, calls []*
 	for idx := range r.Perm(len(s.corpus)) {
 		p = s.corpus[idx].Clone()
 		resources := getCompatibleResources(p, t.TypeName, r)
-		if len(resources) > 0 {
+		if len(resources) > 0 && p.Resource {
 			resource = resources[r.Intn(len(resources))]
 			break
 		}
diff --git a/syz-fuzzer/proc.go b/syz-fuzzer/proc.go
index 0cb186b4..dabe3ce2 100644
--- a/syz-fuzzer/proc.go
+++ b/syz-fuzzer/proc.go
@@ -162,12 +162,19 @@ func (proc *Proc) triageInput(item *WorkTriage) {
 	data := item.p.Serialize()
 	sig := hash.Hash(data)
 
+	item.p.Resource = true
+	/* base ebpfsig retstate feedback */
+	if proc.fuzzer.config.Flags&ipc.FlagEnableEbpfSignal != 0 {
+		item.p.Resource = getResourceFlagFromSignal(item.info.Signal)
+	}
+
 	log.Logf(2, "added new input for %v to corpus:\n%s", logCallName, data)
 	proc.fuzzer.sendInputToManager(rpctype.RPCInput{
 		Call:   callName,
 		Prog:   data,
 		Signal: inputSignal.Serialize(),
 		Cover:  inputCover.Serialize(),
+		SpeRes: item.p.Resource,
 	})
 
 	proc.fuzzer.addInputToCorpus(item.p, inputSignal, sig)
@@ -200,6 +207,15 @@ func getSignalAndCover(p *prog.Prog, info *ipc.ProgInfo, call int) (signal.Signa
 	return signal.FromRaw(inf.Signal, signalPrio(p, inf, call)), inf.Cover
 }
 
+func getResourceFlagFromSignal(Signal []uint64) bool {
+	for _, sig := range Signal {
+		if sig&0xf000000000000000 == 0xf000000000000000 {
+			return true
+		}
+	}
+	return false
+}
+
 func (proc *Proc) smashInput(item *WorkSmash) {
 	if proc.fuzzer.faultInjectionEnabled && item.call != -1 {
 		proc.failCall(item.p, item.call)
diff --git a/syz-manager/html.go b/syz-manager/html.go
index 46d61eda..66e0bfa9 100644
--- a/syz-manager/html.go
+++ b/syz-manager/html.go
@@ -195,6 +195,7 @@ func (mgr *Manager) httpCorpus(w http.ResponseWriter, r *http.Request) {
 			Short:  p.String(),
 			Cover:  len(inp.Cover),
 			Signal: inp.Signal.Deserialize(),
+			SpeRes: inp.SpeRes,
 		})
 	}
 	sort.Slice(data.Inputs, func(i, j int) bool {
@@ -607,6 +608,7 @@ type UIInput struct {
 	Short  string
 	Cover  int
 	Signal signal.Signal
+	SpeRes bool
 }
 
 var summaryTemplate = html.CreatePage(`
@@ -752,11 +754,13 @@ var corpusTemplate = html.CreatePage(`
 	<tr>
 		<th>Coverage</th>
 		<th>Program</th>
+		<th>Resource</th>
 	</tr>
 	{{range $inp := $.Inputs}}
 	<tr>
 		<td><a href='/cover?input={{$inp.Sig}}'>{{$inp.Cover}}</a></td>
 		<td><a href="/input?sig={{$inp.Sig}}">{{$inp.Short}}</a></td>
+                <td><a href="/input?sig={{$inp.Sig}}">{{$inp.SpeRes}}</a></td>
 	</tr>
 	{{end}}
 </table>
-- 
2.20.1

