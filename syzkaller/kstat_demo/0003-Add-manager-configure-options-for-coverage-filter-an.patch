From 4e9d8eb9011113aacc2a919ffe4a53cdf751b3d3 Mon Sep 17 00:00:00 2001
From: Bins94 <kaipeng94@gmail.com>
Date: Thu, 2 Apr 2020 22:56:56 -0400
Subject: [PATCH 3/5] Add manager configure options for coverage filter and
 ebpf feedback

---
 executor/executor.cc         | 52 ++++++++++++++++++++----------------
 pkg/instance/instance.go     | 12 ++++-----
 pkg/ipc/ipc.go               | 26 +++++++++---------
 pkg/mgrconfig/config.go      |  5 ++++
 pkg/mgrconfig/load.go        |  2 ++
 syz-fuzzer/fuzzer.go         | 26 +++++++++++-------
 syz-manager/manager.go       |  2 +-
 tools/syz-runtest/runtest.go |  2 +-
 8 files changed, 75 insertions(+), 52 deletions(-)

diff --git a/executor/executor.cc b/executor/executor.cc
index c656931e..69fa44ca 100644
--- a/executor/executor.cc
+++ b/executor/executor.cc
@@ -125,6 +125,8 @@ static bool flag_net_reset;
 static bool flag_cgroups;
 static bool flag_close_fds;
 static bool flag_devlink_pci;
+static bool flag_cover_filter;
+static bool flag_ebpf_signal;
 
 static bool flag_collect_cover;
 static bool flag_dedup_cover;
@@ -411,8 +413,8 @@ int main(int argc, char** argv)
 			// Don't enable comps because we don't use them in the fuzzer yet.
 			cover_enable(&extra_cov, false, true);
 		}
-		+/* initialize bitmap for coverage filter */
-		    debug("Read pcs for bitmap ...\n");
+		/* initialize bitmap for coverage filter */
+		debug("Read pcs for bitmap ...\n");
 		uint32 c = readPcs();
 		for (uint32 i = 0; i < c; i++) {
 			uint32 pc = func_pcs[i];
@@ -499,6 +501,8 @@ void parse_env_flags(uint64 flags)
 	flag_cgroups = flags & (1 << 9);
 	flag_close_fds = flags & (1 << 10);
 	flag_devlink_pci = flags & (1 << 11);
+	flag_cover_filter = flags & (1 << 12);
+	flag_ebpf_signal = flags & (1 << 13);
 }
 
 #if SYZ_EXECUTOR_USES_FORK_SERVER
@@ -907,27 +911,29 @@ void write_coverage_signal(cover_t* cov, uint32* signal_count_pos, uint32* cover
 	uint32 nsig = 0;
 	cover_data_t prev = 0;
 
-	/* Read both state signal and coverage signal is OK */
-	debug("Reading ...\n");
-	/* 64bit hex and a '\n' */
-	char buf[0x11];
-	int ret = 0x11, n = 0;
-	/* Be sure the signal of a syscall is really read */
-	while (ret > 0 || n < 3000) {
-		memset(buf, 0, sizeof(buf));
-		ret = read(monpipe, buf, sizeof(buf));
-		uint64_t state = 0;
-		if (ret > 0) {
-			state = strtoul(buf, NULL, 16);
-			/* state signal start with 0xf
-                        * Write out real state for fuzzer's further handle
-                        */
-			write_output64(state);
-			debug("A state signal 0x%016lx\n", state);
-			n = 0;
-			nsig++;
+	if (flag_ebpf_signal) {
+		/* Read both state signal and coverage signal is OK */
+		debug("Reading ...\n");
+		/* 64bit hex and a '\n' */
+		char buf[0x11];
+		int ret = 0x11, n = 0;
+		/* Be sure the signal of a syscall is really read */
+		while (ret > 0 || n < 3000) {
+			memset(buf, 0, sizeof(buf));
+			ret = read(monpipe, buf, sizeof(buf));
+			uint64_t state = 0;
+			if (ret > 0) {
+				state = strtoul(buf, NULL, 16);
+				/* state signal start with 0xf
+	       * Write out real state for fuzzer's further handle
+	       */
+				write_output64(state);
+				debug("A state signal 0x%016lx\n", state);
+				n = 0;
+				nsig++;
+			}
+			n++;
 		}
-		n++;
 	}
 	for (uint32 i = 0; i < cov->size; i++) {
 		cover_data_t pc = cover_data[i];
@@ -935,7 +941,7 @@ void write_coverage_signal(cover_t* cov, uint32* signal_count_pos, uint32* cover
 			debug("got bad pc: 0x%llx\n", (uint64)pc);
 			doexit(0);
 		}
-		if (!cover_filter(pc))
+		if (flag_cover_filter && !cover_filter(pc))
 			continue;
 		cover_data_t sig = pc ^ prev;
 		prev = hash(pc);
diff --git a/pkg/instance/instance.go b/pkg/instance/instance.go
index 5adc9dc6..38c6be7c 100644
--- a/pkg/instance/instance.go
+++ b/pkg/instance/instance.go
@@ -317,7 +317,7 @@ func (inst *inst) testInstance() error {
 	}
 
 	cmd := OldFuzzerCmd(fuzzerBin, executorCmd, "test", inst.cfg.TargetOS, inst.cfg.TargetArch, fwdAddr,
-		inst.cfg.Sandbox, 0, inst.cfg.Cover, true)
+		inst.cfg.Sandbox, 0, inst.cfg.Cover, true, false, false)
 	outc, errc, err := inst.vm.Run(10*time.Minute, nil, cmd)
 	if err != nil {
 		return fmt.Errorf("failed to run binary in VM: %v", err)
@@ -421,7 +421,7 @@ func (inst *inst) testProgram(command string, testTime time.Duration) error {
 }
 
 func FuzzerCmd(fuzzer, executor, name, OS, arch, fwdAddr, sandbox string, procs, verbosity int,
-	cover, debug, test, runtest bool) string {
+	cover, debug, test, runtest bool, covfilter bool, ebpfsig bool) string {
 	osArg := ""
 	if targets.Get(OS, arch).HostFuzzer {
 		// Only these OSes need the flag, because the rest assume host OS.
@@ -438,13 +438,13 @@ func FuzzerCmd(fuzzer, executor, name, OS, arch, fwdAddr, sandbox string, procs,
 		verbosityArg = fmt.Sprintf(" -vv=%v", verbosity)
 	}
 	return fmt.Sprintf("%v -executor=%v -name=%v -arch=%v%v -manager=%v -sandbox=%v"+
-		" -procs=%v -cover=%v -debug=%v -test=%v%v%v",
+		" -procs=%v -cover=%v -debug=%v -test=%v%v%v -covfilter=%v -ebpfsig=%v",
 		fuzzer, executor, name, arch, osArg, fwdAddr, sandbox,
-		procs, cover, debug, test, runtestArg, verbosityArg)
+		procs, cover, debug, test, runtestArg, verbosityArg, covfilter, ebpfsig)
 }
 
-func OldFuzzerCmd(fuzzer, executor, name, OS, arch, fwdAddr, sandbox string, procs int, cover, test bool) string {
-	return FuzzerCmd(fuzzer, executor, name, OS, arch, fwdAddr, sandbox, procs, 0, cover, false, test, false)
+func OldFuzzerCmd(fuzzer, executor, name, OS, arch, fwdAddr, sandbox string, procs int, cover, test bool, covfilter bool, ebpfsig bool) string {
+	return FuzzerCmd(fuzzer, executor, name, OS, arch, fwdAddr, sandbox, procs, 0, cover, false, test, false, covfilter, ebpfsig)
 }
 
 func ExecprogCmd(execprog, executor, OS, arch, sandbox string, repeat, threaded, collide bool,
diff --git a/pkg/ipc/ipc.go b/pkg/ipc/ipc.go
index 08b9d31b..dba908d6 100644
--- a/pkg/ipc/ipc.go
+++ b/pkg/ipc/ipc.go
@@ -29,18 +29,20 @@ type EnvFlags uint64
 
 // Note: New / changed flags should be added to parse_env_flags in executor.cc
 const (
-	FlagDebug            EnvFlags = 1 << iota // debug output from executor
-	FlagSignal                                // collect feedback signals (coverage)
-	FlagSandboxSetuid                         // impersonate nobody user
-	FlagSandboxNamespace                      // use namespaces for sandboxing
-	FlagSandboxAndroid                        // use Android sandboxing for the untrusted_app domain
-	FlagExtraCover                            // collect extra coverage
-	FlagEnableTun                             // setup and use /dev/tun for packet injection
-	FlagEnableNetDev                          // setup more network devices for testing
-	FlagEnableNetReset                        // reset network namespace between programs
-	FlagEnableCgroups                         // setup cgroups for testing
-	FlagEnableCloseFds                        // close fds after each program
-	FlagEnableDevlinkPCI                      // setup devlink PCI device
+	FlagDebug             EnvFlags = 1 << iota // debug output from executor
+	FlagSignal                                 // collect feedback signals (coverage)
+	FlagSandboxSetuid                          // impersonate nobody user
+	FlagSandboxNamespace                       // use namespaces for sandboxing
+	FlagSandboxAndroid                         // use Android sandboxing for the untrusted_app domain
+	FlagExtraCover                             // collect extra coverage
+	FlagEnableTun                              // setup and use /dev/tun for packet injection
+	FlagEnableNetDev                           // setup more network devices for testing
+	FlagEnableNetReset                         // reset network namespace between programs
+	FlagEnableCgroups                          // setup cgroups for testing
+	FlagEnableCloseFds                         // close fds after each program
+	FlagEnableDevlinkPCI                       // setup devlink PCI device
+	FlagEnableCoverFilter                      // maintain a bitmap for coverage filter
+	FlagEnableEbpfSignal                       // collect ebpf feedback as signals
 )
 
 // Per-exec flags for ExecOpts.Flags:
diff --git a/pkg/mgrconfig/config.go b/pkg/mgrconfig/config.go
index 69df2a80..ac618096 100644
--- a/pkg/mgrconfig/config.go
+++ b/pkg/mgrconfig/config.go
@@ -83,6 +83,11 @@ type Config struct {
 
 	// Use KCOV coverage (default: true).
 	Cover bool `json:"cover"`
+	/* Enable KCOV filter */
+	Covfilter bool `json:"covfilter"`
+	/* Enable ebpf feedback */
+	Ebpfsig bool `json:"ebpfsig"`
+
 	// Reproduce, localize and minimize crashers (default: true).
 	Reproduce bool `json:"reproduce"`
 
diff --git a/pkg/mgrconfig/load.go b/pkg/mgrconfig/load.go
index 4e413636..565bdc12 100644
--- a/pkg/mgrconfig/load.go
+++ b/pkg/mgrconfig/load.go
@@ -59,6 +59,8 @@ func defaultValues() *Config {
 	return &Config{
 		SSHUser:   "root",
 		Cover:     true,
+		Covfilter: false,
+		Ebpfsig:   false,
 		Reproduce: true,
 		Sandbox:   "none",
 		RPC:       ":0",
diff --git a/syz-fuzzer/fuzzer.go b/syz-fuzzer/fuzzer.go
index b6e8be4b..fd6ab6cd 100644
--- a/syz-fuzzer/fuzzer.go
+++ b/syz-fuzzer/fuzzer.go
@@ -106,15 +106,17 @@ func main() {
 	debug.SetGCPercent(50)
 
 	var (
-		flagName    = flag.String("name", "test", "unique name for manager")
-		flagOS      = flag.String("os", runtime.GOOS, "target OS")
-		flagArch    = flag.String("arch", runtime.GOARCH, "target arch")
-		flagManager = flag.String("manager", "", "manager rpc address")
-		flagProcs   = flag.Int("procs", 1, "number of parallel test processes")
-		flagOutput  = flag.String("output", "stdout", "write programs to none/stdout/dmesg/file")
-		flagPprof   = flag.String("pprof", "", "address to serve pprof profiles")
-		flagTest    = flag.Bool("test", false, "enable image testing mode")      // used by syz-ci
-		flagRunTest = flag.Bool("runtest", false, "enable program testing mode") // used by pkg/runtest
+		flagName      = flag.String("name", "test", "unique name for manager")
+		flagOS        = flag.String("os", runtime.GOOS, "target OS")
+		flagArch      = flag.String("arch", runtime.GOARCH, "target arch")
+		flagManager   = flag.String("manager", "", "manager rpc address")
+		flagProcs     = flag.Int("procs", 1, "number of parallel test processes")
+		flagOutput    = flag.String("output", "stdout", "write programs to none/stdout/dmesg/file")
+		flagPprof     = flag.String("pprof", "", "address to serve pprof profiles")
+		flagTest      = flag.Bool("test", false, "enable image testing mode")      // used by syz-ci
+		flagRunTest   = flag.Bool("runtest", false, "enable program testing mode") // used by pkg/runtest
+		flagCovFilter = flag.Bool("covfilter", false, "enable coverage filter")
+		flagEbpfSig   = flag.Bool("ebpfsig", false, "enable ebpf feedback")
 	)
 	flag.Parse()
 	outputType := parseOutputType(*flagOutput)
@@ -130,6 +132,12 @@ func main() {
 		log.Fatalf("failed to create default ipc config: %v", err)
 	}
 	sandbox := ipc.FlagsToSandbox(config.Flags)
+	if *flagCovFilter {
+		config.Flags |= (1 << 12)
+	}
+	if *flagEbpfSig {
+		config.Flags |= (1 << 13)
+	}
 	shutdown := make(chan struct{})
 	osutil.HandleInterrupts(shutdown)
 	go func() {
diff --git a/syz-manager/manager.go b/syz-manager/manager.go
index 2a0b7dd4..77379468 100644
--- a/syz-manager/manager.go
+++ b/syz-manager/manager.go
@@ -569,7 +569,7 @@ func (mgr *Manager) runInstance(index int) (*Crash, error) {
 	defer atomic.AddUint32(&mgr.numFuzzing, ^uint32(0))
 	cmd := instance.FuzzerCmd(fuzzerBin, executorCmd, fmt.Sprintf("vm-%v", index),
 		mgr.cfg.TargetOS, mgr.cfg.TargetArch, fwdAddr, mgr.cfg.Sandbox, procs, fuzzerV,
-		mgr.cfg.Cover, *flagDebug, false, false)
+		mgr.cfg.Cover, *flagDebug, false, false, mgr.cfg.Covfilter, mgr.cfg.Ebpfsig)
 	outc, errc, err := inst.Run(time.Hour, mgr.vmStop, cmd)
 	if err != nil {
 		return nil, fmt.Errorf("failed to run fuzzer: %v", err)
diff --git a/tools/syz-runtest/runtest.go b/tools/syz-runtest/runtest.go
index 76c120cd..ec684741 100644
--- a/tools/syz-runtest/runtest.go
+++ b/tools/syz-runtest/runtest.go
@@ -184,7 +184,7 @@ func (mgr *Manager) boot(name string, index int) (*report.Report, error) {
 	}
 	cmd := instance.FuzzerCmd(fuzzerBin, executorCmd, name,
 		mgr.cfg.TargetOS, mgr.cfg.TargetArch, fwdAddr, mgr.cfg.Sandbox, mgr.cfg.Procs, 0,
-		mgr.cfg.Cover, mgr.debug, false, true)
+		mgr.cfg.Cover, mgr.debug, false, true, false, false)
 	outc, errc, err := inst.Run(time.Hour, mgr.vmStop, cmd)
 	if err != nil {
 		return nil, fmt.Errorf("failed to run fuzzer: %v", err)
-- 
2.20.1

