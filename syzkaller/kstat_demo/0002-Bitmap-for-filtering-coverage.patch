From 69d663c0284b047fa02954e8480c3a42c5fbe5a5 Mon Sep 17 00:00:00 2001
From: Bins94 <kaipeng94@gmail.com>
Date: Thu, 2 Apr 2020 22:47:48 -0400
Subject: [PATCH 2/5] Bitmap for filtering coverage

---
 executor/bitmap.h    | 37 +++++++++++++++++++++++++++++++++++++
 executor/executor.cc | 42 ++++++++++++++++++++++++++++++++++++++++--
 2 files changed, 77 insertions(+), 2 deletions(-)
 create mode 100644 executor/bitmap.h

diff --git a/executor/bitmap.h b/executor/bitmap.h
new file mode 100644
index 00000000..cb00e543
--- /dev/null
+++ b/executor/bitmap.h
@@ -0,0 +1,37 @@
+#include <stdio.h>
+
+#define KERNEL_TEXT_BASE 0x81000000
+
+typedef unsigned int uint32;
+
+uint32* func_pcs;
+
+uint32 readPcs()
+{
+	FILE* f = fopen("/root/funcaddr.map", "r");
+	uint32 count = 0;
+	if (f == NULL)
+		return -1;
+	while (!feof(f)) {
+		uint32 pc;
+		int ret = fscanf(f, "%x", &pc);
+		if (ret > 0) {
+			count++;
+		}
+	}
+	func_pcs = (uint32*)malloc(count * sizeof(uint32));
+	if (func_pcs == NULL)
+		return -2;
+	fseek(f, 0, SEEK_SET);
+	uint32* pp = func_pcs;
+	while (!feof(f)) {
+		uint32 pc;
+		int ret = fscanf(f, "%x", &pc);
+		if (ret > 0) {
+			*(pp) = pc;
+			pp++;
+		}
+	}
+	fclose(f);
+	return count;
+}
diff --git a/executor/executor.cc b/executor/executor.cc
index 044b98a5..c656931e 100644
--- a/executor/executor.cc
+++ b/executor/executor.cc
@@ -15,6 +15,7 @@
 #include <time.h>
 #include <unistd.h>
 
+#include "bitmap.h"
 #include "defs.h"
 
 #if defined(__GNUC__)
@@ -47,6 +48,10 @@ typedef unsigned int uint32;
 typedef unsigned short uint16;
 typedef unsigned char uint8;
 
+#define COVERAGE_BITMAP_SIZE 0x300000 / sizeof(uint32)
+static uint32 kTextBitMap[COVERAGE_BITMAP_SIZE];
+extern uint32* func_pcs;
+
 // exit/_exit do not necessary work (e.g. if fuzzer sets seccomp filter that prohibits exit_group).
 // Use doexit instead.  We must redefine exit to something that exists in stdlib,
 // because some standard libraries contain "using ::exit;", but has different signature.
@@ -406,6 +411,20 @@ int main(int argc, char** argv)
 			// Don't enable comps because we don't use them in the fuzzer yet.
 			cover_enable(&extra_cov, false, true);
 		}
+		+/* initialize bitmap for coverage filter */
+		    debug("Read pcs for bitmap ...\n");
+		uint32 c = readPcs();
+		for (uint32 i = 0; i < c; i++) {
+			uint32 pc = func_pcs[i];
+			i++;
+			pc -= KERNEL_TEXT_BASE;
+			uint32 pcc = pc >> 4;
+			uint32 index = pcc / 32;
+			uint32 shift = pcc % 32;
+			if (pcc > 0x300000)
+				continue;
+			kTextBitMap[index] |= (0x1 << shift);
+		}
 	}
 
 	int status = 0;
@@ -582,7 +601,7 @@ void execute_one(int monpipe)
 	char buf[0x11];
 	int ret = 17;
 	/* There may be some remnant data should be cleared */
-	while (ret > 0 || n < 2000) {
+	while (ret > 0 || n < 3000) {
 		ret = read(monpipe, buf, sizeof(buf));
 		if (ret > 0) {
 			n = 0;
@@ -862,6 +881,23 @@ thread_t* schedule_call(int call_index, int call_num, bool colliding, uint64 cop
 }
 
 #if SYZ_EXECUTOR_USES_SHMEM
+bool cover_filter(uint64 pc)
+{
+	pc &= 0xffffffff;
+	pc -= KERNEL_TEXT_BASE;
+	uint64 pcc = pc >> 4;
+	uint64 index = pcc / 32;
+	uint64 shift = pcc % 32;
+	/* Kernel text size */
+	if (pcc > 0x300000) {
+		return false;
+	}
+	if ((kTextBitMap[index] & (0x1 << shift))) {
+		return true;
+	}
+	return false;
+}
+
 template <typename cover_data_t>
 void write_coverage_signal(cover_t* cov, uint32* signal_count_pos, uint32* cover_count_pos, int monpipe)
 {
@@ -877,7 +913,7 @@ void write_coverage_signal(cover_t* cov, uint32* signal_count_pos, uint32* cover
 	char buf[0x11];
 	int ret = 0x11, n = 0;
 	/* Be sure the signal of a syscall is really read */
-	while (ret > 0 || n < 2000) {
+	while (ret > 0 || n < 3000) {
 		memset(buf, 0, sizeof(buf));
 		ret = read(monpipe, buf, sizeof(buf));
 		uint64_t state = 0;
@@ -899,6 +935,8 @@ void write_coverage_signal(cover_t* cov, uint32* signal_count_pos, uint32* cover
 			debug("got bad pc: 0x%llx\n", (uint64)pc);
 			doexit(0);
 		}
+		if (!cover_filter(pc))
+			continue;
 		cover_data_t sig = pc ^ prev;
 		prev = hash(pc);
 		if (dedup(sig))
-- 
2.20.1

