From 42b528deeca32d36ad76beb77870ea31edd7db2c Mon Sep 17 00:00:00 2001
From: bins <bins@kp-test>
Date: Thu, 16 Jul 2020 02:23:48 -0400
Subject: [PATCH 4/6] manager/html: extend web UI to display bitmap in souce
 code

---
 executor/executor.cc    | 37 +++++++++++++++++++-
 pkg/ipc/ipc.go          | 35 +++++++++++++++++--
 pkg/kstate/kstate.go    | 28 +++++++++++++++
 pkg/mgrconfig/config.go |  1 +
 pkg/rpctype/rpctype.go  |  2 ++
 prog/prog.go            |  2 ++
 syz-fuzzer/proc.go      | 24 +++++++++++++
 syz-manager/html.go     | 77 ++++++++++++++++++++++++++++++++++-------
 syz-manager/manager.go  | 32 +++++++++++++++++
 syz-manager/rpc.go      |  2 +-
 10 files changed, 224 insertions(+), 16 deletions(-)
 create mode 100644 pkg/kstate/kstate.go

diff --git a/executor/executor.cc b/executor/executor.cc
index 6c567e59..24db9815 100644
--- a/executor/executor.cc
+++ b/executor/executor.cc
@@ -265,9 +265,11 @@ struct call_reply {
 	uint32 reserrno;
 	uint32 flags;
 	uint32 signal_size;
+	uint32 kstate_size;
 	uint32 cover_size;
 	uint32 comps_size;
 	// signal/cover/comps follow
+	/* signal/kstate/cover/comps follow */
 };
 
 enum {
@@ -878,8 +880,22 @@ void write_coverage_signal(cover_t* cov, uint32* signal_count_pos, uint32* cover
 	cover_data_t* cover_data = ((cover_data_t*)cov->data) + 1;
 	uint32 nsig = 0;
 	cover_data_t prev = 0;
+	uint32* state_count_pos = signal_count_pos + 1;
+	/* Collect kernel state less than 50 per syscall */
+	cover_data_t* state[0x50];
+	uint32 nstate = 0;
 	for (uint32 i = 0; i < cov->size; i++) {
 		cover_data_t pc = cover_data[i];
+		if (((uint64(pc) >> 48) & 0xffff) == 0xfefe) {
+			if (nstate < 0x50) {
+				state[nstate] = &cover_data[i];
+				nstate++;
+			}
+			i++;
+			if (!flag_cover_filter)
+				i++;
+			continue;
+		}
 		if (!cover_check(pc)) {
 			debug("got bad pc: 0x%llx\n", (uint64)pc);
 			doexit(0);
@@ -899,6 +915,15 @@ void write_coverage_signal(cover_t* cov, uint32* signal_count_pos, uint32* cover
 	// Write out number of signals.
 	*signal_count_pos = nsig;
 
+	/* Write kernel state to shared memory */
+	*state_count_pos = nstate;
+	for (uint32 i = 0; i < nstate; i++) {
+		uint64 id = (uint64)(*state[i]);
+		uint64 val = (uint64) * (state[i] + 1);
+		write_output_64(id);
+		write_output_64(val);
+	}
+
 	if (!flag_collect_cover)
 		return;
 	// Write out real coverage (basic block PCs).
@@ -912,8 +937,16 @@ void write_coverage_signal(cover_t* cov, uint32* signal_count_pos, uint32* cover
 	}
 	// Truncate PCs to uint32 assuming that they fit into 32-bits.
 	// True for x86_64 and arm64 without KASLR.
-	for (uint32 i = 0; i < cover_size; i++)
+	for (uint32 i = 0; i < cover_size; i++) {
+		cover_data_t pc = cover_data[i];
+		if (((uint64(pc) >> 48) & 0xffff) == 0xfefe) {
+			i += 1;
+			write_output(0x81000000);
+			write_output(0x81000000);
+			continue;
+		}
 		write_output(cover_data[i]);
+	}
 	*cover_count_pos = cover_size;
 }
 #endif
@@ -995,6 +1028,7 @@ void write_call_output(thread_t* th, bool finished)
 	write_output(reserrno);
 	write_output(call_flags);
 	uint32* signal_count_pos = write_output(0); // filled in later
+	/*uint32* kstate_count_pos = */ write_output(0); // filled in later
 	uint32* cover_count_pos = write_output(0); // filled in later
 	uint32* comps_count_pos = write_output(0); // filled in later
 
@@ -1039,6 +1073,7 @@ void write_call_output(thread_t* th, bool finished)
 	reply.reserrno = reserrno;
 	reply.flags = call_flags;
 	reply.signal_size = 0;
+	reply.kstate_size = 0;
 	reply.cover_size = 0;
 	reply.comps_size = 0;
 	if (write(kOutPipeFd, &reply, sizeof(reply)) != sizeof(reply))
diff --git a/pkg/ipc/ipc.go b/pkg/ipc/ipc.go
index e8030735..84f802e6 100644
--- a/pkg/ipc/ipc.go
+++ b/pkg/ipc/ipc.go
@@ -17,6 +17,7 @@ import (
 	"unsafe"
 
 	"github.com/google/syzkaller/pkg/cover"
+	"github.com/google/syzkaller/pkg/kstate"
 	"github.com/google/syzkaller/pkg/osutil"
 	"github.com/google/syzkaller/pkg/signal"
 	"github.com/google/syzkaller/prog"
@@ -91,8 +92,9 @@ type CallInfo struct {
 	Signal []uint32 // feedback signal, filled if FlagSignal is set
 	Cover  []uint32 // per-call coverage, filled if FlagSignal is set and cover == true,
 	// if dedup == false, then cov effectively contains a trace, otherwise duplicates are removed
-	Comps prog.CompMap // per-call comparison operands
-	Errno int          // call errno (0 if the call was successful)
+	Comps prog.CompMap      // per-call comparison operands
+	State kstate.KernStates /* feedback kernel state */
+	Errno int               // call errno (0 if the call was successful)
 }
 
 type ProgInfo struct {
@@ -357,6 +359,10 @@ func (env *Env) parseOutput(p *prog.Prog) (*ProgInfo, error) {
 			return nil, fmt.Errorf("call %v/%v/%v: signal overflow: %v/%v",
 				i, reply.index, reply.num, reply.signalSize, len(out))
 		}
+		if inf.State, ok = readKernState(&out, reply.stateSize); !ok {
+			return nil, fmt.Errorf("call %v/%v/%v: state overflow: %v/%v",
+				i, reply.index, reply.num, reply.stateSize, len(out))
+		}
 		if inf.Cover, ok = readUint32Array(&out, reply.coverSize); !ok {
 			return nil, fmt.Errorf("call %v/%v/%v: cover overflow: %v/%v",
 				i, reply.index, reply.num, reply.coverSize, len(out))
@@ -473,6 +479,30 @@ func readUint32Array(outp *[]byte, size uint32) ([]uint32, bool) {
 	return res, true
 }
 
+func readKernState(outp *[]byte, size uint32) (kstate.KernStates, bool) {
+	if size == 0 {
+		return nil, true
+	}
+	fmt.Fprintf(os.Stdout, "%x state was read", size)
+	states := make(kstate.KernStates, size)
+	out := *outp
+	if int(size)*8*2 > len(out) {
+		return nil, false
+	}
+	for i := uint32(0); i < size; i++ {
+		id, _ := readUint64(outp)
+		val, _ := readUint64(outp)
+		state := kstate.KernState{
+			ID:    uint64(id),
+			Value: uint64(val),
+		}
+		states = append(states, state)
+		fmt.Fprintf(os.Stdout, "read a kernel state id: %x, value: %x\n", state.ID, state.Value)
+	}
+	/* state_size * size(uint64) * 3  */
+	return states, true
+}
+
 type command struct {
 	pid      int
 	config   *Config
@@ -526,6 +556,7 @@ type callReply struct {
 	errno      uint32
 	flags      uint32 // see CallFlags
 	signalSize uint32
+	stateSize  uint32
 	coverSize  uint32
 	compsSize  uint32
 	// signal/cover/comps follow
diff --git a/pkg/kstate/kstate.go b/pkg/kstate/kstate.go
new file mode 100644
index 00000000..cd04a674
--- /dev/null
+++ b/pkg/kstate/kstate.go
@@ -0,0 +1,28 @@
+package kstate
+
+type KernStates []KernState
+
+type KernState struct {
+	ID    uint64
+	Value uint64
+}
+
+func (states KernStates) Merge(id uint64, value uint64) KernStates {
+	for i, s := range states {
+		/* duplicate state set */
+		if (s.ID == id) && (s.Value == value) {
+			return states
+		}
+		/* The state can't be stably trigger */
+		if (s.Value != value) && (s.ID == id) {
+			states = append(states[:i], states[i+1:]...)
+			return states
+		}
+	}
+	states = append(states, KernState{ID: id, Value: value})
+	return states
+}
+
+func (states KernStates) Len() int {
+	return len([]KernState(states))
+}
diff --git a/pkg/mgrconfig/config.go b/pkg/mgrconfig/config.go
index 512bd568..2a77dba2 100644
--- a/pkg/mgrconfig/config.go
+++ b/pkg/mgrconfig/config.go
@@ -118,4 +118,5 @@ type Config struct {
 	SyzExecprogBin string `json:"-"`
 	SyzExecutorBin string `json:"-"`
 	SyzCoverPCs    string `json:"coverpcs"`
+	SyzKernStates  string `json:"kstatemap"`
 }
diff --git a/pkg/rpctype/rpctype.go b/pkg/rpctype/rpctype.go
index 95326ae8..5b5535d3 100644
--- a/pkg/rpctype/rpctype.go
+++ b/pkg/rpctype/rpctype.go
@@ -8,6 +8,7 @@ package rpctype
 import (
 	"github.com/google/syzkaller/pkg/host"
 	"github.com/google/syzkaller/pkg/ipc"
+	"github.com/google/syzkaller/pkg/kstate"
 	"github.com/google/syzkaller/pkg/signal"
 )
 
@@ -16,6 +17,7 @@ type RPCInput struct {
 	Prog   []byte
 	Signal signal.Serial
 	Cover  []uint32
+	State  kstate.KernStates
 }
 
 type RPCCandidate struct {
diff --git a/prog/prog.go b/prog/prog.go
index 8c804e17..a441374b 100644
--- a/prog/prog.go
+++ b/prog/prog.go
@@ -5,6 +5,7 @@ package prog
 
 import (
 	"fmt"
+	"github.com/google/syzkaller/pkg/kstate"
 )
 
 type Prog struct {
@@ -19,6 +20,7 @@ type Call struct {
 	Args    []Arg
 	Ret     *ResultArg
 	Comment string
+	State   kstate.KernStates
 }
 
 type Arg interface {
diff --git a/syz-fuzzer/proc.go b/syz-fuzzer/proc.go
index e762bdcc..311a46d6 100644
--- a/syz-fuzzer/proc.go
+++ b/syz-fuzzer/proc.go
@@ -17,6 +17,7 @@ import (
 	"github.com/google/syzkaller/pkg/cover"
 	"github.com/google/syzkaller/pkg/hash"
 	"github.com/google/syzkaller/pkg/ipc"
+	"github.com/google/syzkaller/pkg/kstate"
 	"github.com/google/syzkaller/pkg/log"
 	"github.com/google/syzkaller/pkg/rpctype"
 	"github.com/google/syzkaller/pkg/signal"
@@ -134,6 +135,7 @@ func (proc *Proc) triageInput(item *WorkTriage) {
 			continue
 		}
 		thisSignal, thisCover := getSignalAndCover(item.p, info, item.call)
+		getKernState(item.p, info)
 		newSignal = newSignal.Intersection(thisSignal)
 		// Without !minimized check manager starts losing some considerable amount
 		// of coverage after each restart. Mechanics of this are not completely clear.
@@ -152,6 +154,7 @@ func (proc *Proc) triageInput(item *WorkTriage) {
 						continue
 					}
 					thisSignal, _ := getSignalAndCover(p1, info, call1)
+					getKernState(p1, info)
 					if newSignal.Intersection(thisSignal).Len() == newSignal.Len() {
 						return true
 					}
@@ -163,12 +166,25 @@ func (proc *Proc) triageInput(item *WorkTriage) {
 	data := item.p.Serialize()
 	sig := hash.Hash(data)
 
+	/* put the kernState into p.Calls, so it can hold the call information after minimize */
+	var inputKernState kstate.KernStates
+	for i, c := range item.p.Calls {
+		for _, s := range c.State {
+			inputKernState = append(inputKernState,
+				kstate.KernState{
+					/* i is sequence number of syscalls */
+					ID:    (s.ID & 0xffffffff) | (uint64(i) << 32),
+					Value: s.Value,
+				})
+		}
+	}
 	log.Logf(2, "added new input for %v to corpus:\n%s", logCallName, data)
 	proc.fuzzer.sendInputToManager(rpctype.RPCInput{
 		Call:   callName,
 		Prog:   data,
 		Signal: inputSignal.Serialize(),
 		Cover:  inputCover.Serialize(),
+		State:  inputKernState,
 	})
 
 	proc.fuzzer.getPCsWeight()
@@ -208,6 +224,14 @@ func getSignalAndCover(p *prog.Prog, info *ipc.ProgInfo, call int) (signal.Signa
 	return signal.FromRaw(inf.Signal, signalPrio(p, inf, call)), inf.Cover
 }
 
+func getKernState(p *prog.Prog, info *ipc.ProgInfo) {
+	for i, ci := range info.Calls {
+		for _, s := range ci.State {
+			p.Calls[i].State = p.Calls[i].State.Merge(s.ID, s.Value)
+		}
+	}
+}
+
 func (proc *Proc) smashInput(item *WorkSmash) {
 	if proc.fuzzer.faultInjectionEnabled && item.call != -1 {
 		proc.failCall(item.p, item.call)
diff --git a/syz-manager/html.go b/syz-manager/html.go
index 2845d79c..e0197053 100644
--- a/syz-manager/html.go
+++ b/syz-manager/html.go
@@ -22,6 +22,7 @@ import (
 
 	"github.com/google/syzkaller/pkg/cover"
 	"github.com/google/syzkaller/pkg/html"
+	"github.com/google/syzkaller/pkg/kstate"
 	"github.com/google/syzkaller/pkg/log"
 	"github.com/google/syzkaller/pkg/osutil"
 	"github.com/google/syzkaller/pkg/signal"
@@ -36,6 +37,7 @@ func (mgr *Manager) initHTTP() {
 	http.HandleFunc("/corpus", mgr.httpCorpus)
 	http.HandleFunc("/crash", mgr.httpCrash)
 	http.HandleFunc("/cover", mgr.httpCover)
+	http.HandleFunc("/bitmap", mgr.httpBitmap)
 	http.HandleFunc("/prio", mgr.httpPrio)
 	http.HandleFunc("/file", mgr.httpFile)
 	http.HandleFunc("/report", mgr.httpReport)
@@ -199,13 +201,18 @@ func (mgr *Manager) httpCorpus(w http.ResponseWriter, r *http.Request) {
 			}
 		}
 		weight = weight - float32(count) + 1
+		if !mgr.cfg.Covfilter {
+			weight = float32(inp.Signal.Deserialize().Len())
+		}
 		data.Inputs = append(data.Inputs, &UIInput{
-			Sig:    sig,
-			Short:  p.String(),
-			Cover:  len(inp.Cover),
-			Weight: weight,
-			Signal: inp.Signal.Deserialize(),
-			SigLen: inp.Signal.Deserialize().Len(),
+			Sig:      sig,
+			Short:    p.String(),
+			Cover:    len(inp.Cover),
+			Weight:   weight,
+			Signal:   inp.Signal.Deserialize(),
+			SigLen:   inp.Signal.Deserialize().Len(),
+			StateLen: inp.State.Len(),
+			State:    inp.State,
 		})
 	}
 	sort.Slice(data.Inputs, func(i, j int) bool {
@@ -301,6 +308,42 @@ func (mgr *Manager) httpCoverFallback(w http.ResponseWriter, r *http.Request) {
 	}
 }
 
+func (mgr *Manager) httpBitmap(w http.ResponseWriter, r *http.Request) {
+	if !mgr.cfg.Cover {
+		mgr.mu.Lock()
+		defer mgr.mu.Unlock()
+		mgr.httpCoverFallback(w, r)
+	}
+	// Note: initCover is executed without mgr.mu because it takes very long time
+	// (but it only reads config and it protected by initCoverOnce).
+	if err := initCover(mgr.sysTarget, mgr.cfg.KernelObj, mgr.cfg.KernelSrc, mgr.cfg.KernelBuildSrc); err != nil {
+		http.Error(w, fmt.Sprintf("failed to generate coverage profile: %v", err), http.StatusInternalServerError)
+		return
+	}
+	mgr.mu.Lock()
+	defer mgr.mu.Unlock()
+	mgr.httpBitmapCover(w, r)
+}
+
+func (mgr *Manager) httpBitmapCover(w http.ResponseWriter, r *http.Request) {
+	var progs []cover.Prog
+	for pc, weight := range mgr.pcsWeight {
+		for i := 0; i < int(weight); i++ {
+			var pcs []uint32
+			pcs = append(pcs, pc)
+			progs = append(progs, cover.Prog{
+				Data: "From pcs weight table: " + string(pc) + ":" + string(i),
+				PCs: coverToPCs(mgr.sysTarget, pcs),
+			})
+		}
+	}
+	if err := reportGenerator.Do(w, progs); err != nil {
+		http.Error(w, fmt.Sprintf("failed to generate coverage profile: %v", err), http.StatusInternalServerError)
+		return
+	}
+	runtime.GC()
+}
+
 func (mgr *Manager) httpPrio(w http.ResponseWriter, r *http.Request) {
 	mgr.mu.Lock()
 	defer mgr.mu.Unlock()
@@ -364,6 +407,12 @@ func (mgr *Manager) httpInput(w http.ResponseWriter, r *http.Request) {
 	}
 	w.Header().Set("Content-Type", "text/plain; charset=utf-8")
 	w.Write(inp.Prog)
+	for _, s := range inp.State {
+		realID := s.ID & 0xffffffff
+		if varName, ok := mgr.kstateMap[realID]; ok {
+			w.Write([]byte(fmt.Sprintf("syscall-%d: %s = 0x%x\n", (s.ID>>32)&0xffff, varName, s.Value)))
+		}
+	}
 }
 
 func (mgr *Manager) httpReport(w http.ResponseWriter, r *http.Request) {
@@ -607,12 +656,14 @@ type UICorpus struct {
 }
 
 type UIInput struct {
-	Sig    string
-	Short  string
-	Cover  int
-	Weight float32
-	Signal signal.Signal
-	SigLen int
+	Sig      string
+	Short    string
+	Cover    int
+	Weight   float32
+	Signal   signal.Signal
+	SigLen   int
+	StateLen int
+	State    kstate.KernStates
 }
 
 var summaryTemplate = html.CreatePage(`
@@ -760,6 +811,7 @@ var corpusTemplate = html.CreatePage(`
 		<th>Program</th>
 		<th>SignalLen</th>
 		<th>Prog Weight</th>
+		<th>StateLen</th>
 	</tr>
 	{{range $inp := $.Inputs}}
 	<tr>
@@ -767,6 +819,7 @@ var corpusTemplate = html.CreatePage(`
 		<td><a href="/input?sig={{$inp.Sig}}">{{$inp.Short}}</a></td>
 		<td><a href="/input?sig={{$inp.Sig}}">{{$inp.SigLen}}</a></td>
 		<td><a href="/input?sig={{$inp.Sig}}">{{$inp.Weight}}</a></td>
+		<td><a href="/input?sig={{$inp.Sig}}">{{$inp.StateLen}}</a></td>
 	</tr>
 	{{end}}
 </table>
diff --git a/syz-manager/manager.go b/syz-manager/manager.go
index f39cdafe..03a06499 100644
--- a/syz-manager/manager.go
+++ b/syz-manager/manager.go
@@ -87,6 +87,7 @@ type Manager struct {
 	// Maps file name to modification time.
 	usedFiles map[string]time.Time
 	pcsWeight map[uint32]float32
+	kstateMap map[uint64]string
 }
 
 const (
@@ -181,6 +182,7 @@ func RunManager(cfg *mgrconfig.Config, target *prog.Target, sysTarget *targets.T
 		usedFiles:             make(map[string]time.Time),
 		saturatedCalls:        make(map[string]bool),
 		pcsWeight:             make(map[uint32]float32),
+		kstateMap:             make(map[uint64]string),
 	}
 
 	log.Logf(0, "loading corpus...")
@@ -190,6 +192,7 @@ func RunManager(cfg *mgrconfig.Config, target *prog.Target, sysTarget *targets.T
 	}
 
 	mgr.readPCsWeight()
+	mgr.readKernStateMap()
 
 	// Create HTTP server.
 	mgr.initHTTP()
@@ -569,6 +572,12 @@ func (mgr *Manager) runInstance(index int) (*Crash, error) {
 		return nil, fmt.Errorf("failed to copy binary: %v", err)
 	}
 
+	/* scp kernel state map to machine */
+	_, err = inst.Copy(mgr.cfg.SyzKernStates)
+	if err != nil {
+		return nil, fmt.Errorf("failed to copy binary: %v", err)
+	}
+
 	fuzzerV := 0
 	procs := mgr.cfg.Procs
 	if *flagDebug {
@@ -1131,6 +1140,29 @@ func (mgr *Manager) readPCsWeight() {
 	}
 }
 
+func (mgr *Manager) readKernStateMap() {
+	kstateFile, err := os.Open(mgr.cfg.SyzKernStates)
+	if err != nil {
+		log.Fatalf("failed to open kernstatemap file: %v", err)
+	}
+	defer kstateFile.Close()
+	for true {
+		var varName string
+		var id uint64
+		_, err := fmt.Fscan(kstateFile, &varName)
+		if err != nil {
+			break
+		}
+		varName = varName[:len(varName)-1]
+		_, err = fmt.Fscan(kstateFile, &id)
+		if err != nil {
+			break
+		}
+		mgr.kstateMap[id] = varName
+		log.Logf(0, "Init KernState map: %s: %x\n", varName, id)
+	}
+}
+
 func (mgr *Manager) collectUsedFiles() {
 	if mgr.vmPool == nil {
 		return
diff --git a/syz-manager/rpc.go b/syz-manager/rpc.go
index 04329e3d..e97faec4 100644
--- a/syz-manager/rpc.go
+++ b/syz-manager/rpc.go
@@ -55,7 +55,7 @@ type RPCManagerView interface {
 	newInput(inp rpctype.RPCInput, sign signal.Signal) bool
 	candidateBatch(size int) []rpctype.RPCCandidate
 	rotateCorpus() bool
-	getPCsWeight() map[uint32]Float32
+	getPCsWeight() map[uint32]float32
 }
 
 func startRPCServer(mgr *Manager) (int, error) {
-- 
2.20.1

