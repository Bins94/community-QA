From 5e8ac946eddeafd07dcfcbd5c637726e157e049c Mon Sep 17 00:00:00 2001
From: bins <bins@kp-test>
Date: Thu, 16 Jul 2020 02:18:23 -0400
Subject: [PATCH 3/6] manager/fuzzer: read pcs weight to calculate the prios of
 prog

---
 pkg/rpctype/rpctype.go |  8 ++++++++
 prog/clone.go          |  1 +
 prog/prio.go           |  2 +-
 prog/prog.go           |  1 +
 syz-fuzzer/fuzzer.go   | 40 +++++++++++++++++++++++++++++++++++++++-
 syz-fuzzer/proc.go     | 25 +++++++++++++++++++++++++
 syz-manager/html.go    | 31 +++++++++++++++++++++++++------
 syz-manager/manager.go | 27 +++++++++++++++++++++++++++
 syz-manager/rpc.go     |  9 +++++++++
 9 files changed, 136 insertions(+), 8 deletions(-)

diff --git a/pkg/rpctype/rpctype.go b/pkg/rpctype/rpctype.go
index fcc01a99..95326ae8 100644
--- a/pkg/rpctype/rpctype.go
+++ b/pkg/rpctype/rpctype.go
@@ -128,3 +128,11 @@ type RunTestDoneArgs struct {
 	Info   []*ipc.ProgInfo
 	Error  string
 }
+
+type GetPCsWeightArgs struct {
+	Nop int
+}
+
+type GetPCsWeightRes struct {
+	PCsWeight map[uint32]float32
+}
diff --git a/prog/clone.go b/prog/clone.go
index c95ae206..f653d88e 100644
--- a/prog/clone.go
+++ b/prog/clone.go
@@ -11,6 +11,7 @@ func (p *Prog) Clone() *Prog {
 	p1 := &Prog{
 		Target: p.Target,
 		Calls:  make([]*Call, len(p.Calls)),
+		Weight: p.Weight,
 	}
 	newargs := make(map[*ResultArg]*ResultArg)
 	for ci, c := range p.Calls {
diff --git a/prog/prio.go b/prog/prio.go
index 647af1cc..6bdc5b99 100644
--- a/prog/prio.go
+++ b/prog/prio.go
@@ -164,7 +164,7 @@ func (target *Target) calcDynamicPrio(corpus []*Prog) [][]float32 {
 			for _, c1 := range p.Calls[idx0+1:] {
 				id0 := c0.Meta.ID
 				id1 := c1.Meta.ID
-				prios[id0][id1] += 1.0
+				prios[id0][id1] += 1.0 * p.Weight
 			}
 		}
 	}
diff --git a/prog/prog.go b/prog/prog.go
index 3e46e15e..8c804e17 100644
--- a/prog/prog.go
+++ b/prog/prog.go
@@ -11,6 +11,7 @@ type Prog struct {
 	Target   *Target
 	Calls    []*Call
 	Comments []string
+	Weight   float32
 }
 
 type Call struct {
diff --git a/syz-fuzzer/fuzzer.go b/syz-fuzzer/fuzzer.go
index 142dcaa2..91058117 100644
--- a/syz-fuzzer/fuzzer.go
+++ b/syz-fuzzer/fuzzer.go
@@ -53,6 +53,8 @@ type Fuzzer struct {
 	corpusHashes map[hash.Sig]struct{}
 	corpusPrios  []int64
 	sumPrios     int64
+	pcsWeight    map[uint32]float32
+	pcsWeightMu  sync.RWMutex
 
 	signalMu     sync.RWMutex
 	corpusSignal signal.Signal // signal of inputs in corpus
@@ -243,7 +245,11 @@ func main() {
 		faultInjectionEnabled:    r.CheckResult.Features[host.FeatureFault].Enabled,
 		comparisonTracingEnabled: r.CheckResult.Features[host.FeatureComparisons].Enabled,
 		corpusHashes:             make(map[hash.Sig]struct{}),
+		pcsWeight:                make(map[uint32]float32),
 	}
+
+	fuzzer.getPCsWeight()
+
 	gateCallback := fuzzer.useBugFrames(r, *flagProcs)
 	fuzzer.gate = ipc.NewGate(2**flagProcs, gateCallback)
 
@@ -267,6 +273,26 @@ func main() {
 	fuzzer.pollLoop()
 }
 
+func (fuzzer *Fuzzer) getPCsWeight() {
+	a := &rpctype.GetPCsWeightArgs{}
+	r := &rpctype.GetPCsWeightRes{
+		PCsWeight: make(map[uint32]float32),
+	}
+	if err := fuzzer.manager.Call("Manager.GetPCsWeight", a, r); err != nil {
+		log.Fatalf("manager call failed: %v", err)
+	}
+	if len(r.PCsWeight) < 1 {
+		log.Fatalf("got a empty pcs weight map")
+	}
+	log.Logf(0, "Got a new weighted pcs map:\n")
+	for pc, w := range r.PCsWeight {
+		log.Logf(0, "pc: 0x%x weight: %.5f", pc, w)
+	}
+	fuzzer.pcsWeightMu.Lock()
+	fuzzer.pcsWeight = r.PCsWeight
+	fuzzer.pcsWeightMu.Unlock()
+}
+
 // Returns gateCallback for leak checking if enabled.
 func (fuzzer *Fuzzer) useBugFrames(r *rpctype.ConnectRes, flagProcs int) func() {
 	var gateCallback func()
@@ -443,11 +469,23 @@ func (fuzzer *Fuzzer) addInputToCorpus(p *prog.Prog, sign signal.Signal, sig has
 	if _, ok := fuzzer.corpusHashes[sig]; !ok {
 		fuzzer.corpus = append(fuzzer.corpus, p)
 		fuzzer.corpusHashes[sig] = struct{}{}
+		weight := float64(p.Weight)
+		if weight < 1 {
+			weight = 1
+		}
 		prio := int64(len(sign))
 		if sign.Empty() {
 			prio = 1
 		}
-		fuzzer.sumPrios += prio
+		/* prio is the number of signal,
+		 * instead, we use the sum of blocks weight */
+		if fuzzer.config.Flags & (1 << 12) != 0 {
+			prio = 1
+		} else {
+			weight = 1
+		}
+		weightedPrio := int64(float64(prio) * float64(weight))
+		fuzzer.sumPrios += weightedPrio
 		fuzzer.corpusPrios = append(fuzzer.corpusPrios, fuzzer.sumPrios)
 	}
 	fuzzer.corpusMu.Unlock()
diff --git a/syz-fuzzer/proc.go b/syz-fuzzer/proc.go
index ff035214..e762bdcc 100644
--- a/syz-fuzzer/proc.go
+++ b/syz-fuzzer/proc.go
@@ -9,6 +9,7 @@ import (
 	"math/rand"
 	"os"
 	"runtime/debug"
+	"sync"
 	"sync/atomic"
 	"syscall"
 	"time"
@@ -170,6 +171,13 @@ func (proc *Proc) triageInput(item *WorkTriage) {
 		Cover:  inputCover.Serialize(),
 	})
 
+	proc.fuzzer.getPCsWeight()
+	weight := calCoverWeight(proc.fuzzer.pcsWeight, proc.fuzzer.pcsWeightMu, inputCover.Serialize())
+	item.p.Weight = weight
+	for _, p := range proc.fuzzer.corpus {
+		log.Logf(3, "Prog: %s weight: %.5f", p.Comments, p.Weight)
+	}
+
 	proc.fuzzer.addInputToCorpus(item.p, inputSignal, sig)
 
 	if item.flags&ProgSmashed == 0 {
@@ -216,6 +224,23 @@ func (proc *Proc) smashInput(item *WorkSmash) {
 	}
 }
 
+func calCoverWeight(pcsWeight map[uint32]float32, pcsWeightMu sync.RWMutex, pcs []uint32) float32 {
+	var weight float32 = 0.0
+	var count uint32 = 0
+	pcsWeightMu.Lock()
+	for _, pc := range pcs {
+		if _, ok := pcsWeight[pc]; ok {
+			weight += pcsWeight[pc]
+			count++
+		}
+	}
+	pcsWeightMu.Unlock()
+	/* Base on the cyclomatic complexity.
+	 * Weight is determined by potential forward edges of the prog */
+	weight = weight - float32(count) + 1
+	return weight
+}
+
 func (proc *Proc) failCall(p *prog.Prog, call int) {
 	for nth := 0; nth < 100; nth++ {
 		log.Logf(1, "#%v: injecting fault into call %v/%v", proc.pid, call, nth)
diff --git a/syz-manager/html.go b/syz-manager/html.go
index fd0873f6..2845d79c 100644
--- a/syz-manager/html.go
+++ b/syz-manager/html.go
@@ -190,10 +190,22 @@ func (mgr *Manager) httpCorpus(w http.ResponseWriter, r *http.Request) {
 			http.Error(w, fmt.Sprintf("failed to deserialize program: %v", err), http.StatusInternalServerError)
 			return
 		}
+		count := 0
+		var weight float32 = 0.0
+		for _, pc := range inp.Cover {
+			if _, ok := mgr.pcsWeight[pc]; ok {
+				count++
+				weight += mgr.pcsWeight[pc]
+			}
+		}
+		weight = weight - float32(count) + 1
 		data.Inputs = append(data.Inputs, &UIInput{
-			Sig:   sig,
-			Short: p.String(),
-			Cover: len(inp.Cover),
+			Sig:    sig,
+			Short:  p.String(),
+			Cover:  len(inp.Cover),
+			Weight: weight,
+			Signal: inp.Signal.Deserialize(),
+			SigLen: inp.Signal.Deserialize().Len(),
 		})
 	}
 	sort.Slice(data.Inputs, func(i, j int) bool {
@@ -595,9 +607,12 @@ type UICorpus struct {
 }
 
 type UIInput struct {
-	Sig   string
-	Short string
-	Cover int
+	Sig    string
+	Short  string
+	Cover  int
+	Weight float32
+	Signal signal.Signal
+	SigLen int
 }
 
 var summaryTemplate = html.CreatePage(`
@@ -743,11 +758,15 @@ var corpusTemplate = html.CreatePage(`
 	<tr>
 		<th>Coverage</th>
 		<th>Program</th>
+		<th>SignalLen</th>
+		<th>Prog Weight</th>
 	</tr>
 	{{range $inp := $.Inputs}}
 	<tr>
 		<td><a href='/cover?input={{$inp.Sig}}'>{{$inp.Cover}}</a></td>
 		<td><a href="/input?sig={{$inp.Sig}}">{{$inp.Short}}</a></td>
+		<td><a href="/input?sig={{$inp.Sig}}">{{$inp.SigLen}}</a></td>
+		<td><a href="/input?sig={{$inp.Sig}}">{{$inp.Weight}}</a></td>
 	</tr>
 	{{end}}
 </table>
diff --git a/syz-manager/manager.go b/syz-manager/manager.go
index f316a216..f39cdafe 100644
--- a/syz-manager/manager.go
+++ b/syz-manager/manager.go
@@ -86,6 +86,7 @@ type Manager struct {
 	// For checking that files that we are using are not changing under us.
 	// Maps file name to modification time.
 	usedFiles map[string]time.Time
+	pcsWeight map[uint32]float32
 }
 
 const (
@@ -179,6 +180,7 @@ func RunManager(cfg *mgrconfig.Config, target *prog.Target, sysTarget *targets.T
 		reproRequest:          make(chan chan map[string]bool),
 		usedFiles:             make(map[string]time.Time),
 		saturatedCalls:        make(map[string]bool),
+		pcsWeight:             make(map[uint32]float32),
 	}
 
 	log.Logf(0, "loading corpus...")
@@ -187,6 +189,8 @@ func RunManager(cfg *mgrconfig.Config, target *prog.Target, sysTarget *targets.T
 		log.Fatalf("failed to open corpus database: %v", err)
 	}
 
+	mgr.readPCsWeight()
+
 	// Create HTTP server.
 	mgr.initHTTP()
 	mgr.collectUsedFiles()
@@ -1098,12 +1102,35 @@ func (mgr *Manager) candidateBatch(size int) []rpctype.RPCCandidate {
 	return res
 }
 
+func (mgr *Manager) getPCsWeight() map[uint32]float32 {
+	mgr.mu.Lock()
+	defer mgr.mu.Unlock()
+	/* Actually, you can do some dynamic calculation and assign to pcs weight here */
+	return mgr.pcsWeight
+}
+
 func (mgr *Manager) rotateCorpus() bool {
 	mgr.mu.Lock()
 	defer mgr.mu.Unlock()
 	return mgr.phase == phaseTriagedHub
 }
 
+func (mgr *Manager) readPCsWeight() {
+	bitmapFile, _ := os.Open(mgr.cfg.SyzCoverPCs)
+	defer bitmapFile.Close()
+	for true {
+		var encode uint64
+		_, err := fmt.Fscanf(bitmapFile, "0x%x\n", &encode)
+		if err != nil {
+			break
+		}
+		var pc uint32 = uint32(encode & 0xffffffff)
+		var weight float32 = float32((encode >> 32) & 0xffff)
+		mgr.pcsWeight[pc] = weight
+		log.Logf(0, "Init PCs weight: pc: %x weight: %f\n", pc, mgr.pcsWeight[pc])
+	}
+}
+
 func (mgr *Manager) collectUsedFiles() {
 	if mgr.vmPool == nil {
 		return
diff --git a/syz-manager/rpc.go b/syz-manager/rpc.go
index f550a2ca..04329e3d 100644
--- a/syz-manager/rpc.go
+++ b/syz-manager/rpc.go
@@ -55,6 +55,7 @@ type RPCManagerView interface {
 	newInput(inp rpctype.RPCInput, sign signal.Signal) bool
 	candidateBatch(size int) []rpctype.RPCCandidate
 	rotateCorpus() bool
+	getPCsWeight() map[uint32]Float32
 }
 
 func startRPCServer(mgr *Manager) (int, error) {
@@ -306,3 +307,11 @@ func (serv *RPCServer) Poll(a *rpctype.PollArgs, r *rpctype.PollRes) error {
 		a.Name, len(r.Candidates), len(r.NewInputs), len(r.MaxSignal.Elems))
 	return nil
 }
+
+func (serv *RPCServer) GetPCsWeight(a *rpctype.GetPCsWeightArgs, r *rpctype.GetPCsWeightRes) error {
+	serv.mu.Lock()
+	defer serv.mu.Unlock()
+	pcsWeight := serv.mgr.getPCsWeight()
+	r.PCsWeight = pcsWeight
+	return nil
+}
-- 
2.20.1

